#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('SecureChat:server');
var http = require('http');
var crypto = require('crypto');
var mongoose = require('mongoose');
var ServerData = require('../models/serverdata');

mongoose.Promise = global.Promise;
mongoose.connect('mongodb://127.0.0.1/chatdb', function(err) {
  if (err) {
    return console.log(err);
  }

  return console.log("Successfully connected to MongoDB!");
});


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// generate server crypto rnd str
var server_secret_id = crypto.randomBytes(16).toString('hex');
console.log('server_secret_id: '+server_secret_id);

var server_secret = crypto.randomBytes(16).toString('hex');
console.log('server_secret: '+server_secret);

var email_server_secret = "foo-bar-baz";
console.log('email_server_secret: '+email_server_secret);

var date_time = new Date;
console.log(date_time);

var data = {
  serverSecretId: server_secret_id,
  serverSecret: server_secret,
  emailServerSecret: email_server_secret,
  dateTime: date_time
};

var newserverdata = new ServerData(data);


newserverdata.save();


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(http);
var listener = io.listen(server);
//listener.sockets.on('connection', function(socket){
//  socket.emit('message', {'message': 'hello!'});
//});

io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
