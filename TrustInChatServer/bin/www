#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var config = require('../config');
var debug = require('debug')('TrustInChat:server');
var crypto = require('crypto');
var mongoose = require('mongoose');
var https = require('https');
var fs = require('fs');
var path = require('path');

var ServerData = require('../models/serverdata');

//mongoose.Promise = global.Promise;
mongoose.connect(config.getDbConnectionString());

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const httpsOptions = {
  cert: fs.readFileSync(path.join(__dirname, 'ssl', 'server.crt')),
  key: fs.readFileSync(path.join(__dirname, 'ssl', 'server.key'))
};

/**
 * Create HTTPS server.
 */
 var server = https.createServer(httpsOptions, app)
  .listen(port, function () {
    console.log(`Serving`);
  });

// when a the nodejs server is loaded
// cryptographic random strings generated
var serverSecretId = crypto.randomBytes(16).toString('hex');
var serverSecret = crypto.randomBytes(16).toString('hex');

var data = {
  serverSecretId: serverSecretId,
  serverSecret: serverSecret
};

var newserverdata = new ServerData(data);
newserverdata.save();

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io').listen(server);
require('../sockets/base.js')(io);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
